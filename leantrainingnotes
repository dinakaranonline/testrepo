========================Day 1 =============

 crockford.com

ECMAC javascript ES6

latentloupe
http://latentflip.com/loupe/

http://latentflip.com/loupe/?code=!!!

MDN Concurrency Model 

https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop 
 
Browser environment 

1. JS engine
	Stack 
	Heap

2. Web APIS

3. Call back and Queue

4. Event looping

If every browser has it's own implementation and version of rendering engine  , end user experience in different browsers may not be the same - some features may be broken or may not work properly . How is this handled ? If this will be covered later , then not an issue.

Execution context : One funtion in js called execution context , which is a frame in stack.

Stack has sequence of frame.

Examples of stack overflow shown here

Visual Studio Code - Best editor

Eclipse based - Node Eclipse

JS - Scope chaining and scripting 

Global Execution Context on startup

Context - two phases 
1. Context Creation phases -

	all var variables will be hoisted to top of context with default value called undefined
	
2. Context Execution phases
	
	
---------------

every function will create execution context but is child execution context

let vs const var keyword

kangax github io

var is not prefered
let - mutable
const - immutable 

without var declaration , it is global scope

Dynamic method binding...

exploringjs.com
speakingjs.com http://speakingjs.com/

invoking functions in js in 4 ways
1. function invocation - global obkect
2. method invocation - invoker objkect
3. constructor invocation - new object
4. call/apply/bind invocation - arg-obj


https://github.com/nagabhushanamn/DEP-PCC-LeanPortal

https://github.com/nagabhushanamn/DEP-PCC-LeanPortal.git

========== Day2 =================

Inheritance - in JS 

Using prototypes

isProtoTypeOf

Every object extends Object prototype

https://dorey.github.io/JavaScript-Equality-Table/

Type coherence : Always use triple equals for comparsion instead of double equals

JS Modules

ES-5 , ES-6

Avoid globals , IIFE pattern , self executing pattern

Global Object wraps every thing. then export other stuff

Single global to avoid conflicting

Module standards and Module loader 

3rd party module standards

1.AMD
2.commonJS
3.System JS ( Angular 2)

ES6 module standards

Packaging - Common Modules 

AMD Loader . require js 

CommonJS modules

Browser does not know commonjs while node js loads properly 

Loader 

Tools to convert commonjs , bundling into some othing else 

Browserify -  to convert commonjs modules to browser 

ES6 Module 

CanIuse.com

Babel js compiler - used to compile ES6 code to ES5 . Polyfill/Transpile 

importing attributes between different files

ES6 syntax
Template Literals
Destructuring 
Arrow functions

============================= Day 3 =========================

HTML 5 , CSS 3 , New ES6 features , JS References, RWD 

Visual Studio Code

Eclipse Mars - Node Eclipse plugin

sudo npm install -g live-server

npm config set proxy http://proxy.cognizant.com:6050
npm config set strict-ssl false
npm get prefix

live-server 
vs code icons - all file extensions will be displayed 

Atom Editor

Node.js runtime and Live Server is js program that runs on top of Node js run time
Node.js server js program that runs on top of Node js run time

Symbol data type

Symbols / Iterator

Collections in JS
Previously only arrays
Map and Weak Map

Iterators/

Generators - keep increasing the current value
yield keyword used 

Promises 

Promises library  for ascyhnronous communication 

Performance related JS 

loading script async 

MDN Javascript
JS Good Parts

Linting tools - to fix compiler type errors in browser

jstherightway.org

What js can do in html page 

using DOM API 
==============
can create,select , delete, update html elements 
can change element attribute values
can change element style
can change element text content
can validate form fields
can create rich UI components - JS , CSS , HTML , images and data

Web-API - functionality implemented and abstracted by browser. 
All browser abstracted api's as JS objects and functions

DOM,XHR, Timer, HTML API's

XHR 
====
to communicate with server side programs asynch 

HTML 5 API's

============= 

Boot strap
bower.io -a package manager for web 
bower --init
bower install bootstrap
-------------
JS- browser world

plain JS
jquery
knockout
angular
react


======

window.document 

Best for event driven programming

DOM API:

document.querySelector= 

Debugging in JS

Jquery 

$ represents JQuery

bower install JQuery

Learning JQuery Functions

library with standard browser side functions

Databinding between view and model is Manual.
--buddy
--poor performance

Knock out helps to avoid these problems with Jquery

Knock Out js library does great work for data binding 

Declarative syntax, automatic refresh

================================= Day 4 =================================== 

Knock OUT 

MVM- Model-ViewModel - View 


Knock Out JS for binding 
Knock OUt is data-binding library while Angular is full framework

bower --install knockout save

Can you please give an example for table with list of records and how binding works in that case? 


Observable vs ko.databinding

Angular 1.X and 2.X -- ( fast , new-syntax)

Facebook React.JS ( View Library - using Virtual DOM)

Redux based flux pattern

Backbone JS 

REST - Architectural constraints

SPA 

Ember, React, Angular 

bower init

bower install angular

Bootstrap css for easy UI components build up

ng-app

Angular bootstrap and sample application 

Angular JS directives

Directive help in DOM manipulations
Modules
Controllers
Expressions

In angular 1 , filters 
In angular 2 , pipes

Filters : Date , currency , json , lowercase , sorting

Custom filter

Angular scope

scope is glue between application controller and view 

Does this project not have context root ? 

Directives - Existing scope , child scope and isolated scope

scope - emit and broadcast

two way data binding

NG life cycle 
	- on bootstrap - phase 1 compilation
	-
	-
AngularJS extension for Chrome


===================================== Day 5 ===============================

Angular JS 

Imperative programming 

Template

nodejs api framework : loopback.io

===================================== Day 6 ===================================

Angular 2. 

Angular 1 disadvantages : Performance issues
So many watchers for simple code 
instead of controllers and scope , we have components

Javascript Babel Transpile JS

Typescript by M$ , extension of Javascript : main.js but main.ts

Powerful type checking and OO features and use of ES2015 features

tsc --target ES6 app.js

systemjs modules for loading 

Modules,Components , system js 

DART -ysed by google

Courses Manager - Demo

Types of Binding :

1.Property Binding 
2.event binding () onclick
3.expression binding []

single responsibility principle

Component driven implementation

Service application

provider

observable and promise

Router

=========================================== Day 7 ======================================

Why Angular 2 ? 

-Avoid too many watchers
-Performance
-better code organisation


ReactJS

Popular JS library

Declarative
Component Based

State management library - Redux

It's just a view library - View part of MVC

ES5 or ES6 syntax

Virtual DOM

Diffing algorithm ensures only changed elements are re-drawn'

Including React.js core libraries and virtual dom
Bundle js 

React components , importing them 

Render function : JSX syntax  Javascript Extension - HTML into js

JSX code transpile to JS code , conversion done by Babel

react getting started - thinkinginreact

props - data flowing from parent to child
state - private data to component

https://facebook.github.io/react/docs/thinking-in-react.html

=========================================== Day 8===================================

Web Dev Tools

NPM - Node Package Manager

	- Command line tool to manage js packages
	
	npm login
	npm publish
	npm init
	npm install <package-name> 
	All such packages will be placed in node-modules.
	package.json will have default js
	
	How to use node package, import in code and use it in our project
	
	npm underscore 
	
	2.5 lakh node packages/ check for support,popularity and project requirement
	version : major.minor.patch	(patch for bug fixes)
	minor for new features
	major for existing features modified
	
	npm version patch
	
	npm uninstall <existing packages>
	
	npm install <packagename> <version> --save
	
	npm version minor
	
	some node packages act as dev dependencies
	
	Babel, Grunt
	
	Karma -Testrunner 
	
	npm install karma --save-dev
	
	production environment : npm -i production
	
	use @package if we can certain version to be deployed in production
	
	Installing node packages which acts as tools globally. Live server for example
	
	Browserify 
	npm install --browserify --g
	sudo npm install --browserify --g
	
	npm get prefix
	npm list -g
	npm list -g --depth=1
	without g will result in modules of current project
	npm set prefix=path
	
	npm get/set
	npm set proxy
	
	Bower - web package manager 
	installing non-npm packages 
	
	installing css, js , images , fonts etc , manages internally dependenices automatically when downloading
	
	npm install -g bower
	
	bower init
	
	bower install 
	bower install jquery --save
	bower install jquery#<version> --save
	
	Bower will identity any compatibility issues between modules
	
	bower install angular-route
	
	bower configuration 
	
	Build tools 
	========
	
	WebPack.pdf
	
	Combining Files
	
	Front end application build process
	
	Minification is important step for buidling front end application 
	
	File Order dependencies
	
	Transpilation is required
	
	JS Linting- check for code convention and tools available to run the code
	
	CSS written css pre-processors 
	
	Less , one of  pre-processors 
	
	Less file can use vairables, functions and then compiles into css
	
	Sass , pre-processors 
	
	Build tools 
	web pack ( new)
	grunt
	gulp	
	brunch
	
	Grunt Demo
	
	Grunt Javascript task runner 
	
	npm install -g grunt -cli
	npm init
	
	
	GruntFile.js
	
	grunt.registertask
	
	GRUNT plugins
	
	grunt <taskname>
	
	Concotanate css, js files
	
	uglify - minify js files
	
	grunt-contrib-less : convert less files into css files
	
	Testing in all browsers :
	
	Headless browser module : phantomjs module

Grunt vs Gulp

	Gulp demo
	Easy to use, fast 	
	
	npm install --g gulp--cli
	
	streaming api using pipe | symbol
	
	webpack.github.io
	
	=====================================================
	
	Day 9 - sick
	
	Webpack and Babel covered, need to catch up
	
	==========================================================
	
	Day 10 - 
	
	JQuery Core components
	Jquery UI
	Jquery Mobile - HTML5 based framework 
	
	But seperation of concern was an issue
	
	Backbone.js 
	models, view, collection , events
	
	Cons: Automatic Data Binding or two way data binding not available.
	
	Knockout.js
	
	MVVM , good data binding, declarative data binding
	
	ember js framework 
	
	DOJO tool kit - now it's not widely preferred
	
	1st js tool kit introduced. DOJO Core and many UI components, pretty heavy 
	
	Sencha EXT-JS 
	
	UI components are good , commerical
	
	Rich UI components 
	
	MomentJS.com
	
	Jodatime
	
	lodash - modular js library 
	
	d3js mainly for graphs 
	
	build with trends , js library comparison 
	
	
	highcharts for best charts similar do d2
	
	Responsive Web Design 
	
	fixed width with desktop as primary view device
	cannot fit this into small devices like tablets
	
	solution :
	use viewport  for different html/css
	
	limitation - maintenance as many html /css need to be handled
	
	single css is used for all types of devices  - responsive web design 
	
	RWD principles eg.foodsense.is

	
	1.Use fluid/flexible grid system to page
	dont use pixels but only abolsute values like % or EM's
	2.Flexible media content
	3.
	
	Flexible grid system and media queries
	
	Responsive CSS Framework - Bootstrap from twitter
	
	flexible container 
	
	Bootstrap containers,components 
	
	Foundation -front end framework
	
	Semantic UI library
	
	UIKit 
	
	Material Design
	Polymer
	Material Design Lite
	Angular Material
	MUICSS
	
	Good Editors for Front end development
	HTML/CSS/JS
	======
	-Atom
	-Sublime Text
	- VS Code
	
	Icon 
	=======
	1.Font awesome
	2. IconMoster
	3. Icons8
	4. IconFinder
	5. Fontello - create own type of icons
	
	Build tools
	=========
	1. Grunt
	2. Gulp
	3. Webpack (module bundler + module loader) (webpack howto github)
	4. Brunch 
	
	Compiler/Polyfills/Transpilers
	=========
	
	Google Closure 
	Tracure 
	es6shmip
	Babel 
	Typescript - language cum transpiler)
	
	Testing 
	
===========

	Qunit - provided by JQuery
	Jasmine testing framework
	
	Testcases need testrunner . Jasmine can be used
	
	Karma- Test Runner
	
	Mokka 
	
	Angular vs React
	
	
	=============================== Day 11 ====================================== 
	
	
	Google jS engine , v8 engine , open source (C++) used in chrome browser
	
	V8 source code
	
	takes instructions from js and then converts into corresponding machine language compatible
	
	Xcode , apple IDE 
	
	V8 - ecma script specification
	
	Node.js
	
	Why ?
	
	-Faster and concurrent
	-lighter
	-perfect for api
	-js and json	
	
	Use cases: LinkedIn , Paypal 
	
	Node standard libraries are JS which then convert into Node Binding C++ ( socket/http) through V8 has Windows
	and Linux Kernel
	
	Same language for both front and back end
	
	Loopback - framework 
	
	Node fastest open-source community
	
	event driven and non-blocking IO model
	
	Node is only js runtime available right now
	
	Traiditional programming 
	
	when query is being executed, IO operation blocks other
	
	context switching is not free
	execution stacks take up memory
	
	for massive concurrency, cannot use OS thread for each connection
	
	either blocks the entire process or implies multiple execution stack
	
	Missing infra...
	
	Node JS is great in evented programming
	
	Node bindings : thread pools (libeio) and event loop (libuv)
	
	Ryan Dhal - founder of Nodejs
	
	Eclipse node eclipse plug-in 
	
	nodejs bin path in preferences
	
	=====
	create server with just 2 lines of code
	var http=require('http');
	var server=http.createServer();
	
	createReadStream for reading small chunks of data
	
	child process/cluster
	
	================= Day 12 =========
	
	Leave 
	
	=================== Day 13 ==========
	
	No session
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
